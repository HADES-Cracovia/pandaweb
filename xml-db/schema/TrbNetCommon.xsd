<?xml version="1.0" encoding="utf-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!--==============================
      Type Definitions
      ==============================-->
  <xs:simpleType name="nametype">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-zA-Z_]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="addresstype">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]{4}"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="valuetype">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-fA-F]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="modetype">
    <xs:restriction base="xs:string">
      <xs:pattern value="(r|w|rw)b?"/>
      <!-- (r)ead and /or (w)rite, plus maybe (b)lock, if a
           no-more-data from this registers transports some vital
           information -->
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="purposetype">
    <!-- config: setup some behaviour
         trigger: register which starts some kind of operation of the hardware
         status: shows the current status of components. E.g. temperature or the state of a state machine
         statistics: statistical information like event counter or amount of data transferred
         ***
         Note: The difference between "status" and "statistics" is not sharp,
         they both give some information about the system.
    -->
    <xs:restriction base="xs:string">
      <xs:enumeration value="config"/>
      <xs:enumeration value="trigger"/>
      <xs:enumeration value="status"/>
      <xs:enumeration value="statistics"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="bittype">
    <xs:restriction base="xs:integer">
      <xs:minInclusive value="0"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="formattype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="raw"/>
      <xs:enumeration value="float"/>
      <xs:enumeration value="integer"/>
      <xs:enumeration value="signed"/>
      <xs:enumeration value="unsigned"/>
      <xs:enumeration value="hex"/>
      <xs:enumeration value="bitmask"/>
      <xs:enumeration value="binary"/>
      <xs:enumeration value="boolean"/>
      <xs:enumeration value="time"/>
      <xs:enumeration value="string"/>
      <xs:enumeration value="enum"/>
    </xs:restriction>
  </xs:simpleType>


  <!--==============================
      Attribute Definition
      ==============================-->
  <xs:attribute name="name"         type="nametype" />
  <xs:attribute name="address"      type="addresstype" />
  <xs:attribute name="mode"         type="modetype"  />
  <xs:attribute name="purpose"      type="purposetype" />
  <xs:attribute name="start"        type="bittype" />
  <xs:attribute name="size"         type="xs:positiveInteger" />
  <xs:attribute name="bits"         type="xs:positiveInteger" />
  <xs:attribute name="defaultValue" type="xs:string" />
  <xs:attribute name="value"        type="valuetype" />
  <xs:attribute name="format"       type="formattype" />
  <xs:attribute name="formatstring" type="xs:string" />
  <xs:attribute name="continuous"   type="xs:boolean" />
  <xs:attribute name="repeat"       type="xs:positiveInteger" />
  <xs:attribute name="errorflag"    type="xs:boolean" />
  <xs:attribute name="invertflag"   type="xs:boolean" />
  <xs:attribute name="noflag"       type="xs:boolean" />  <!--Don't put green/red color-->
  <xs:attribute name="rate"         type="xs:boolean" />  <!--This value shows a rate -->
  <!-- unit and scale give information about how to interpret data. a
       numerical scaling factor and/or a physical unit. E.g.
       temperature measured in 1/16th degrees will be ".0625" and "Â°C"
  -->
  <xs:attribute name="unit"         type="xs:string" />
  <xs:attribute name="scale"        type="xs:double" />
  <xs:attribute name="scaleoffset"  type="xs:double" />


  <!--==============================
      Simple Elements
      ==============================-->
  <xs:element name="description" type="xs:string" />

  <!--==============================
      Complex Elements
      ==============================-->

  <xs:simpleType name="NonEmptyString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
      <xs:pattern value=".*[^\s].*" />
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="enumItem">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="NonEmptyString">
          <xs:attribute name="value" type="valuetype" />
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>


  <xs:element name="group">
    <xs:complexType>
      <xs:sequence>
        <!-- a group does not necessarily need a description -->
        <xs:choice minOccurs="0">
          <xs:element   ref="description"/>
        </xs:choice>
        <xs:choice maxOccurs="unbounded">
          <xs:element   ref="group"       maxOccurs="unbounded" />
          <xs:element   ref="register"    maxOccurs="unbounded" />
          <xs:element   ref="memory"      maxOccurs="unbounded" />
          <xs:element   ref="fifo"        maxOccurs="unbounded" />
        </xs:choice>
      </xs:sequence>

      <xs:attribute ref="name" use="required" />
      <xs:attribute ref="address" />
      <!-- size of the containing elements (more groups or
           trbdatatypes), specified in 32bit long words
      -->
      <xs:attribute ref="size" />
      <xs:attribute ref="purpose" />
      <xs:attribute ref="continuous" />
      <xs:attribute ref="mode" />
      <xs:attribute ref="format" />
      <xs:attribute ref="repeat" />
      <xs:attribute ref="rate" />

    </xs:complexType>

    <!-- consistency of addresses (and start, size of fields) is
         checked more precisely programmatically -->
    <xs:unique name="UniqueTrbDataAddressesInGroup">
      <xs:selector xpath="register | memory | fifo" />
      <xs:field xpath="@address" />
    </xs:unique>
  </xs:element>




  <xs:element name="field">
    
  <!-- we define this as mixed to provide values to be written to the
       TrbNet (or to store data extracted from TrbNet). It will be
       converted to hex (or "binary") according to format attribute -->
  <xs:complexType mixed="true">
    <xs:sequence>
      <!-- description can be omitted if a register or alike only contains
           one or several identical fields and the description of them can
           be inherited from the register itself-->
      <xs:choice minOccurs="0">
        <xs:element   ref="description"/>
      </xs:choice>
      <!-- enum items are only meaningful for format="enum" fields,
           however we don't complain if there are some for other
           formats... -->
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element   ref="enumItem" />
      </xs:choice>
    </xs:sequence>

    <xs:attribute ref="name" use="required" />
    <!-- "start" (and "address" in basicTrbdata) should usually be
         provided in the database -->
    <xs:attribute ref="start" use="required" />
    <xs:attribute ref="bits" use="required" />
    <xs:attribute ref="purpose" />
    <xs:attribute ref="mode" />
    <!-- if the default value of that field is not 0x0 (in the
         appropiate conversion according to format attribute), it
         can be specified here -->
    <xs:attribute ref="defaultValue" />
    <xs:attribute ref="format" />
    <xs:attribute ref="formatstring" />
    <xs:attribute ref="repeat" />
    <xs:attribute ref="unit" />
    <xs:attribute ref="scale" />
    <xs:attribute ref="scaleoffset" />
    <!-- if PERL evaluates this field to true,
         an error is indicated by this field -->
    <xs:attribute ref="errorflag" />
    <xs:attribute ref="invertflag" />
    <xs:attribute ref="noflag" />    
    <xs:attribute ref="rate" />
    </xs:complexType>
    <xs:unique name="UniqueEnumItems">
      <xs:selector xpath="enumItem" />
      <xs:field xpath="@value" />
    </xs:unique>
  </xs:element>

  <xs:complexType name="basicTrbData">
    <xs:attribute ref="name" use="required" />
    <!-- "address" (and "start" in fieldtype) should usually be provided in
         the database, but this is verified only programmatically. If
         it was required here, setup files would become more
         complicated as they need to be... -->
    <xs:attribute ref="address" />
    <xs:attribute ref="mode" />
    <xs:attribute ref="purpose" />
    <xs:attribute ref="rate" />
  </xs:complexType>


  <xs:element name="register">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="basicTrbData">
          <xs:attribute ref="repeat" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="memory">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="basicTrbData">
          <!-- size specified in "bits" long words -->
          <xs:attribute ref="size" use="required" />
          <!-- bits is by default assumed to be 32 -->
          <xs:attribute ref="bits" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="fifo">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="basicTrbData">
          <!-- a fifo is currently not different at all from
               basicTrbData, but we keep this complicated definition
               for future extensions -->
          <xs:attribute ref="repeat" />
          <xs:attribute ref="size" use="required" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
