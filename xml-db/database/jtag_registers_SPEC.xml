<?xml version="1.0"  encoding="utf-8" ?>
<TrbNet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:noNamespaceSchemaLocation="TrbNet.xsd"
  name="JtagController"
  offset="1000"
  >
<group name="JtagCommonControl"
       address="0000"  size="37"  function="config"  mode="rw"  continuous="true">

  <register name="WaitBeforeStart"
            address="0007" mode="rw" function ="config" >
    <description>Wait time between write sequence and start signal.</description>
    <field name="WaitBeforeStart"
           start="0"   size="20"  mode="rw"  type="config"  format="integer"  defaultValue="0" >
      <description>The number of MAPS clock cycles to wait after last write before sending the start signal. </description>
    </field>
  </register>
  
  <register name="TriggerInitSeq"
            address="000c" mode="w" function ="trigger" >
    <description>Trigger the init sequence.</description>
    <field name="TriggerInitSeq"
           start="0"   size="5"  mode="w"  type="trigger"  format="bitmask"  defaultValue="0" >
      <description>A bitmask to trigger the init sequence on individual JTAG chains. </description>
    </field>
  </register>

  <register name="TriggerReset"
            address="000d" mode="w" function ="trigger" >
    <description>Trigger the init sequence.</description>
    <field name="TriggerReset"
           start="0"   size="5"  mode="w"  type="trigger"  format="bitmask"  defaultValue="0" >
      <description>A bitmask to trigger sending a reset pulse on individual JTAG chains </description>
    </field>
  </register>

  <register name="TriggerStart"
            address="000e" mode="w" function ="trigger" >
    <description>Trigger sending a start pulse.</description>
    <field name="TriggerStart"
           start="0"   size="5"  mode="w"  type="trigger"  format="bitmask"  defaultValue="0" >
      <description>A bitmask to trigger sending a start pulse on individual JTAG chains </description>
    </field>
  </register>

  <register name="TriggerJtagRun"
            address="000f" mode="w" function ="trigger" >
    <description>Trigger running JTAG write.</description>
    <field name="TriggerJtagRun"
           start="0"   size="5"  mode="w"  type="trigger"  format="bitmask"  defaultValue="0" >
      <description>A bitmask to trigger writing the JTAG registers three times on individual JTAG chains </description>
    </field>
  </register>

  <register name="ResetBeforeInit"
            address="0010" mode="rw" function ="config" >
    <description>Generate a reset before doing init sequence</description>
    <field name="ResetBeforeInit"
           start="0"   size="1"  mode="rw"  type="config"  format="boolean"  defaultValue="0" >
      <description>Enable to send a reset pulse before starting init sequence</description>
    </field>
  </register>

  <register name="ResetAfterFirstWrite"
            address="0011" mode="rw" function ="config" >
    <description>Generate a reset after first register write sequence</description>
    <field name="ResetAfterFirstWrite"
           start="0"   size="1"  mode="rw"  type="config"  format="boolean"  defaultValue="0" >
      <description>Enable to send a reset pulse after the first writing of JTAG registers</description>
    </field>
  </register>

  <register name="TriggerWriteOnce"
            address="0014" mode="w" function ="trigger" >
    <description>Trigger writing all JTAG registers once</description>
    <field name="TriggerWriteOnce"
           start="0"   size="5"  mode="w"  type="trigger"  format="bitmask"  defaultValue="0" >
      <description>Trigger writing all JTAG registers once on individual JTAG chains</description>
    </field>
  </register>

  <group name="JtagOverride"
       address="0020"  size="5"  function="config"  mode="rw"  continuous="true">
    <description>Sets fixed values for all outputs for JTAG and sensor control and inverts the outputs if needed. One register for each JTAG chain.</description>
    
    <!--
    MAPS_RESET_OUT(i) <= (maps_reset(i)  xor signals_invert(i)(10)) when signals_invert(i)(11) = '1' else signals_invert(i)(10);
    MAPS_START_OUT(i) <= (maps_start(i)  xor signals_invert(i)(8))  when signals_invert(i)(9) = '1'  else signals_invert(i)(8);
    JTAG_TCK_OUT(i)   <= (jtag_tck(i)    xor signals_invert(i)(6))  when signals_invert(i)(7) = '1'  else signals_invert(i)(6);
    JTAG_TMS_OUT(i)   <= (jtag_tms(i)    xor signals_invert(i)(4))  when signals_invert(i)(5) = '1'  else signals_invert(i)(4);
    JTAG_TDI_OUT(i)   <= (jtag_tdi(i)    xor signals_invert(i)(2))  when signals_invert(i)(3) = '1'  else signals_invert(i)(2);
    jtag_tdo(i)       <= (JTAG_TDO_IN(i) xor signals_invert(i)(0))  when signals_invert(i)(1) = '1'  else signals_invert(i)(0);

    clk_maps_tmp_p(i) <= signals_invert(i)(12) when signals_invert(i)(13) = '1' else signals_invert(i)(12);
    clk_maps_tmp_n(i) <= not signals_invert(i)(12) when signals_invert(i)(13) = '1' else signals_invert(i)(12);
      -->
  </group>

</group>

</TrbNet>

