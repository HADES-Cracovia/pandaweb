<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<link href="../layout/styles.css" rel="stylesheet" type="text/css"/>
<script src="../scripts/scripts.js" type="text/javascript"></script>
<title>TDC Debug Registers</title>
</head>
<body>


<h2><a href="../">TDC Debug Registers</a></h2>
<form acion="">
<table class="form"><tr class="head"><th colspan=4>Configuration
<tr title="4-digit hex board address for data query"><td>Board
    <td><input onChange="setValues()" type="text" id="form_board" name="board" maxlength="4" value="fe48">
<tr title="list of 4-digit hex addresses of boards to show"><td>Filter
    <td><input onChange="setValues()" type="text" id="form_filter" name="filter"  value="" >
<tr title="Number of TDC channels to show"><td># of Channels
    <td><input onChange="setValues()" type="text" id="form_channels" name="channels" maxlength="3" value="65">
<tr title="Update interval in milliseconds, separate for first and second table"><td>Update Interval (ms)
    <td><input onChange="setValues()" type="text" id="form_rate" name="rate" maxlength="5" value="2000">
        <input onChange="setValues()" type="text" id="form_rate2" name="rate2" maxlength="5" value="5000">

<tr><td title="For huge set-ups, enable this to split data queries in several smaller chunks">Split Table
    <td title="For huge set-ups, enable this to split data queries in several smaller chunks"><input onChange="setValues()" type="checkbox" id="form_split" name="split" value="4">

<tr><td><td title="Just for your convenience, you actually don't need this button..."><input type="button" onClick="setValues()" value="OK">

</table>
</form>

<div style="float:left"><table class="content" id="content"><tr><th>Channel<th>Value</table></div>
<div style="float:left"><table class="content" id="contentstat"><tr><th>Register<th>Values</table></div>


<script language="javascript">
var updaterate = document.getElementById("form_rate").value;
var updaterate2= document.getElementById("form_rate2").value;
var filter     = document.getElementById("form_filter").value;
var board      = document.getElementById("form_board").value;
var channels   = document.getElementById("form_channels").value;
var split      = document.getElementById("form_split").checked?"-4":"";

var regstatus = "c100-2";

var regstatusnames = new Array("rd fsm<br>wr fsm<br>trg handler fsm","");

var updateChDebugTask;
var updateDebugRegsTask;
var enableGroup = new Array();
for(i=0;i<1000;i++) enableGroup[i] = new Array();

function settimers(time1,time2) {

  if(time1 != -1) {
    if(!time1) time1 = updaterate;
    clearTimeout(updateChDebugTask);
    updateChDebugTask = setTimeout("getdata('../commands/get.pl?"+board+"-c200-"+channels+split+"',updateChDebug)",time1);
    }
    
  if(time2 != -1) {
    if(!time2) time2 = updaterate2;
    clearTimeout(updateDebugRegsTask);
    updateDebugRegsTask = setTimeout("getdata('../commands/get.pl?"+board+"-"+regstatus+"',updateDebugregs)",time2);
    }
  }


function setValues() {
  updaterate = document.getElementById("form_rate").value;
  updaterate2= document.getElementById("form_rate2").value;
  board      = document.getElementById("form_board").value;
  filter     = document.getElementById("form_filter").value;
  split      = document.getElementById("form_split").checked?"-4":"";
  channels   = document.getElementById("form_channels").value;
  settimers(200,50);
  
  }

function updateChDebug(data) {
  if(!document.getElementById("content").innerHTML) return;
  var b = data.split("&");
  var c = {};
  var isShown = new Array();
  o = "<tr class=\"head\"><th>Reg<th>Content";

  for(j=0;j<b.length-1;j++) {
    c[j] = b[j].split(" ");
    if(filter == "" || filter.indexOf(c[j][0]) != -1)
      isShown[j] = 1;
    else
      isShown[j] = 0;
    if(isShown[j])
      o += "<th>"+c[j][0];
    } 
    o += "<th>"+"Description";

  for(i = 1; i <= channels; i++) {
    o += "<tr><th>"+(i-1+0xc200).toString(16)+"<th>"+"rd fsm"+"<br>"+"wr fsm";
    for(j=0;j<b.length-1;j++) {
      if(isShown[j]) {
        val = c[j][i];
	rd_fsm = ((val&0xf000000)>>24);
        wr_fsm = ((val&0xf0000000)>>28);
        o += "<td>";
        o += rd_fsm+"<br>"+wr_fsm;
        o += "<td>";
	switch(rd_fsm) {
	  case 0: o += "OTHER";          break;
	  case 1: o += "IDLE";           break;
	  case 2: o += "FLUSH_A";        break;
	  case 3: o += "FLUSH_B";        break;
	  case 4: o += "FLUSH_C";        break;
	  case 5: o += "FLUSH_D";        break;
	  case 6: o += "READOUT_EPOCH";  break;
	  case 7: o += "READOUT_DATA_A"; break;
	  case 8: o += "READOUT_DATA_B"; break;
	  case 9: o += "READOUT_DATA_C"; break;
        }
        o += "<br>";
	switch(wr_fsm) {
	  case 0: o += "OTHER";            break;
	  case 1: o += "WRITE_EPOCH_WORD"; break;
	  case 2: o += "WRITE_DATA_WORD";  break;
	  case 3: o += "EXCEPTION";        break;
	  case 4: o += "WAIT_FOR_HIT";     break;
	  case 5: o += "WRITE_STOP_WORD";  break;
        }

        }
      }
    }
  document.getElementById("content").innerHTML  = o;
  settimers(0,-1);
  delete isShown;
  }
  
function updateDebugregs(data) {
  if(!document.getElementById("contentstat").innerHTML) return;
  var b = data.split("&");
  var c = {};
  var isShown = new Array();
  o = "<tr class=\"head\"><th>Reg<th>Content";

  for(j=0;j<b.length-1;j++) {
    c[j] = b[j].split(" ");
    if(filter == "" || filter.indexOf(c[j][0]) != -1)
      isShown[j] = 1;
    else
      isShown[j] = 0;
    if(isShown[j])
      o += "<th>"+c[j][0];
    }
    o += "<th>"+"Description";
 
  for(i = 0; i < 1; i++) {
    if(regstatusnames[i]=="") continue;
    o += "<tr><th>"+(0xc101+i).toString(16)+"<td>"+regstatusnames[0];

    
    for(j=0;j<b.length-1;j++) {
        if(isShown[j]) {
        val = c[j][i+1]; <!-- c100 -->
        ver = ((val&0x0ffe0000)>>17); <!-- tdc version -->
        o += "<td>";
        if(ver < 0x0212) {
          val = c[j][i+1]; <!-- read the state machines for version < 2.1.2 -->
          rd_fsm_rdout = (val&0xF);
          wr_fsm_rdout = ((val&0xF0)>>4)
          o += rd_fsm_rdout.toString(16)+"<br>"+wr_fsm_rdout.toString(16)+"<br>"+"NA"+"<br>";
          }
        else{
          val = c[j][i+2]; <!-- read the state machines for version > 2.1.2 -->
          rd_fsm_rdout = (val&0xF);
          wr_fsm_rdout = ((val&0xF0)>>4);
          trg_handler_fsm = ((val&0xF00)>>8);
          o += rd_fsm_rdout.toString(16)+"<br>"+wr_fsm_rdout.toString(16)+"<br>"+trg_handler_fsm.toString(16)+"<br>";
          }
        o += "<td>";
	switch(rd_fsm_rdout) {
	  case 0: o += "OTHER";                    break;
	  case 1: o += "IDLE";                     break;
	  case 2: o += "WAIT_FOR_TRG_WIND_END";    break;
	  case 3: o += "WAIT_FOR_BUFFER_TRANSFER"; break;
	  case 4: o += "RD_CH";                    break;
	  case 5: o += "";                         break;
	  case 6: o += "WAIT_FOR_LVL1_TRG_A";      break;
	  case 7: o += "WAIT_FOR_LVL1_TRG_B";      break;
	  case 8: o += "WAIT_FOR_LVL1_TRG_C";      break;
	  case 9: o += "SEND_STATUS";              break;
	  case 10: o += "SEND_TRG_RELEASE_A";      break;
	  case 11: o += "SEND_TRG_RELEASE_B";      break;
	  case 12: o += "SEND_TRG_RELEASE_C";      break;
        }
        o += "<br>";
	switch(wr_fsm_rdout) {
	  case 0: o += "OTHER"; break;
	  case 1: o += "IDLE";  break;
	  case 2: o += "WR_CH"; break;
	  case 3: o += "WAIT";  break;
        }
        o += "<br>";
	switch(trg_handler_fsm) {
	  case 0: o += "OTHER";                  break;
	  case 1: o += "IDLE";                   break;
	  case 2: o += "CHECK_TRIGGER_LENGTH";   break;
	  case 3: o += "COUNT";                  break;
	  case 4: o += "COUNT_CALIBRATION";      break;
	  case 5: o += "VALIDATE_TRIGGER";       break;
	  case 6: o += "WIN_END";                break;
	  case 7: o += "MISSING_REFERENCE_TIME"; break;
	  case 8: o += "WAIT_NEXT_TRIGGER";      break;
        }
        }
      }
    }
  document.getElementById("contentstat").innerHTML  = o;
  settimers(-1,0);
  delete isShown;
  }
  

settimers(200,50);
  
</script>
</body></html>
