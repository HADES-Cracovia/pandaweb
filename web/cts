#!/usr/bin/perl

# Debugging
   use warnings;
   use strict;
   use Carp;
   $SIG{ __DIE__ } = sub { Carp::confess( @_ ) };

use lib "./include";
   
# Trb/Cts IO
 #  use TrbSim;    included in connectToCTS if required
#   use TrbNet;    #included in connectToCTS if required
   use Cts;
   use CtsConfig;
   use CtsCommands;
   
# Misc
   use POSIX qw[ceil];
   use Scalar::Util qw[looks_like_number];
   use List::Util qw[min max sum];   
   use Date::Format;
   use Data::Dumper;
   
   use Time::HiRes qw(usleep gettimeofday tv_interval);
   
   BEGIN {
      if (eval "require JSON::PP;") {
         *JSON_BIND:: = *JSON::PP::;
      } else {
         eval "require JSON;";
         *JSON_BIND:: = *JSON::XS::;
      }
   }


   use FileHandle;
   
   use CtsPlugins::CtsModStatic;
   
   
sub help {
   print <<'END_MSG';
cts [options] command

Options:
   -h | --help      Produce this message and quit
   -e | --endpoint  Endpoint number of CTS
   -s | --sim       Simulate TrbNet
   -i | --interval  Interval of rate monitoring in milliseconds. Default: 1000
   -q | --quite     Prevent monitor from writing values to stdout            
   
Commands:
   l | list         Connect to CTS and list all named registers available
   
   d | dump         Read configuration from CTS and generate trbcmd-script to
                    reproduce setup after TrbNet reset
   
   r KEYS    |      Read named registers from CTS. KEYS is a white-space 
   read KEYS        seperated list of registes available (see command l)
                    Example: cts.pl r trg_pulser_config0 trg_coin_config1
                     
   w VALUES     |   Write value to CTS's named registers. VALUES is a comma 
   write VALUES     sepearated list in the following format: {key}={value}
                    Example: cts.pl w reg0=0x12, trg_coin_config0.window=10
                     
   m [dir] |        Rate Monitor. Periodically fetch counters and calculate 
   monitor [dir]    rates. Results are send to STDOUT in an human readable form.
                    If [dir] is provided the data is additionally dumped into
                    in the JSON format. Further a trigger rate plot
                    is stored in [file].png

END_MSG
}



sub connectToCTS {
   my $endpoint = shift;
   
   my $trb;
   eval {require "TrbNet.pm"};
   $trb = TrbNet->new($endpoint);

   return Cts->new($trb);
}

####################################################################################
my $endpoint = CtsConfig->getDefaultEndpoint;

my $updateInterval = 1000;
my $rateNumber     = 30;
my $quite = 0;

for(my $i=0; $i < @ARGV; $i++) {
   my $arg = $ARGV[$i];
   chomp $arg;
   $arg = lc $arg;
   
   if ($arg eq "-h" or $arg eq "--help") {
      help();
      exit();
      
   } elsif ($arg eq "-e" or $arg eq "--endpoint") {
      unless ($i < @ARGV) {
         print "last parameter expects value\n";
         exit();
      }
      
      $i++;
      
      if ($ARGV[$i] =~ /0x([\da-f]{1,4})/) {
         $endpoint = hex($1);
      } else {
         print "endpoint requires hex-number\n";
         exit();
      }
   
   } elsif ($arg eq "-i" or $arg eq "--interval") {
      unless ($i < @ARGV) {
         print "last parameter expects value\n";
         exit();
      }
      
      $updateInterval = $ARGV[++$i];

   } elsif ($arg eq "-q" or $arg eq "--quite") {
      unless ($i < @ARGV) {
         print "last parameter expects value\n";
         exit();
      }
      
      $quite = 1;
      
   } elsif ($arg eq "-n") {
      unless ($i < @ARGV) {
         print "last parameter expects value\n";
         exit();
      }
      
      $rateNumber = $ARGV[++$i];
   
   } elsif ($arg eq "l" or $arg eq "list") {
      printTable commandList connectToCTS($endpoint);
      exit();
      
   } elsif ($arg eq "d" or $arg eq "dump") {
      print commandDump connectToCTS($endpoint);
      exit();
   
   } elsif ($arg eq "r" or $arg eq "read") {
      unless ($i < $#ARGV) {
         print "register name missing\n";
         exit();
      }
      
      my @list  = @ARGV[$i+1 .. $#ARGV];
      printTable commandRead(connectToCTS($endpoint), \@list);
      exit();
   
   } elsif ($arg eq "w" or $arg eq "write") {
      unless ($i < $#ARGV) {
         print "register name missing\n";
         exit();
      }
      
      my $cts = connectToCTS($endpoint);
      commandWrite($cts, lc join(" ", @ARGV[$i+1 .. $#ARGV]));
      exit();
   
   } elsif ($arg eq "m" or $arg eq "monitor") {
      my $cts = connectToCTS($endpoint);
      commandMonitor($cts, $ARGV[++$i], $updateInterval, $rateNumber, $quite);
      exit();
      
   } else {
      print "Invalid argument: $arg \n";
      help();
      exit;
      
   }
}

print "Command missing\n";
help();
exit;
